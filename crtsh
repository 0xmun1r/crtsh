#!/bin/bash

# Banner function
banner() {
cat << "EOF"
  ________  ________  _________  ________  ___  ___     
|\   ____\|\   __  \|\___   ___\\   ____\|\  \|\  \    
\ \  \___|\ \  \|\  \|___ \  \_\ \  \___|\ \  \\\  \   
 \ \  \    \ \   _  _\   \ \  \ \ \_____  \ \   __  \  
  \ \  \____\ \  \\  \|   \ \  \ \|____|\  \ \  \ \  \ 
   \ \_______\ \__\\ _\    \ \__\  ____\_\  \ \__\ \__\
    \|_______|\|__|\|__|    \|__| |\_________\|__|\|__|
                                  \|_________|         
                                                       
   Subdomain Recon Tool by 0Ã—mun1r (crt.sh based)
EOF
}

# Help function
usage() {
cat << EOF
Usage: crtsh [options]

Options:
  -d <domain>         Enumerate subdomains for a single domain
  -dL <file>          Enumerate subdomains for a list of domains (one per line)
  -o <output.txt>     Save output to specified file (default: crtsh_output.txt)
  -s                  Silent mode (no banner or terminal output)
  -h                  Show this help message and exit

Examples:
  crtsh -d example.com
  crtsh -dL domains.txt -o results.txt
  crtsh -d nasa.gov -s -o nasa.txt
EOF
exit 0
}

# Variables
domain=""
domain_list=""
output="crtsh_output.txt"
silent=false

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -d) domain="$2"; shift ;;
        -dL) domain_list="$2"; shift ;;
        -o) output="$2"; shift ;;
        -s) silent=true ;;
        -h) usage ;;
        *) echo "Unknown option: $1"; usage ;;
    esac
    shift
done

# Show banner if not in silent mode
if [ "$silent" = false ]; then
    banner
fi

# Function to fetch subdomains for a domain (no jq)
fetch_subdomains() {
    local dom="$1"
    local outfile="$2"

    [ "$silent" = false ] && echo "[*] Enumerating subdomains for: $dom"

    subs=$(curl -s "https://crt.sh/?q=%25.$dom&output=json" | \
        grep -oP '"name_value":"\K[^"]+' | \
        sed 's/\*\.//g' | \
        tr ',' '\n' | \
        tr '[:upper:]' '[:lower:]' | \
        grep -v '@' | \
        grep -E "^([a-z0-9.-]+\.)*$dom$" | \
        sort -u)

    if [ "$silent" = false ]; then
        echo "[+] Found $(echo "$subs" | grep -c .) subdomains for $dom"
        echo "$subs"
    fi

    echo -e "\n# Subdomains for $dom" >> "$outfile"
    echo "$subs" >> "$outfile"
}

# Clear output file
> "$output"

# Main logic
if [[ -n "$domain" ]]; then
    fetch_subdomains "$domain" "$output"
elif [[ -n "$domain_list" ]]; then
    while IFS= read -r dom; do
        [[ -z "$dom" || "$dom" =~ ^# ]] && continue
        fetch_subdomains "$dom" "$output"
    done < "$domain_list"
else
    echo "[-] Error: No domain or domain list provided."
    usage
fi

[ "$silent" = false ] && echo "[+] All results saved to: $output"
